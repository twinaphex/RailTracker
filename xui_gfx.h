#ifndef XUI_GFX_H
#define XUI_GFX_H

#ifdef __cplusplus
extern "C" {
#endif

typedef struct xui_gfx
{
    int width;
    int height;
    unsigned int* pixels;
} xui_gfx;

void xui_init_gfx(xui_gfx* gfx, int width, int height);
void xui_destroy_gfx(xui_gfx* gfx);
void xui_clear(xui_gfx* gfx, int col);
void xui_draw_rect(xui_gfx* gfx, int x, int y, int w, int h, int col);
void xui_draw_rect_outline(xui_gfx* gfx, int x, int y, int w, int h, int col);
void xui_draw_string(xui_gfx* gfx, int x, int y, int col, const char* str);
void xui_string_bounds(xui_gfx* gfx, const char* str, int* w, int* h);

#ifdef __cplusplus
}
#endif

#endif // XUI_GFX_H

#ifdef XUI_GFX_IMPLEMENTATION

unsigned char font_data_8x8[95][8] = {
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00},
{0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00},
{0x18, 0x7e, 0xc0, 0x7c, 0x06, 0xfc, 0x18, 0x00},
{0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00},
{0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00},
{0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00},
{0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00},
{0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00},
{0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30},
{0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00},
{0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00},
{0x7c, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0x7c, 0x00},
{0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00},
{0x7c, 0xc6, 0x06, 0x7c, 0xc0, 0xc0, 0xfe, 0x00},
{0xfc, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xfc, 0x00},
{0x0c, 0xcc, 0xcc, 0xcc, 0xfe, 0x0c, 0x0c, 0x00},
{0xfe, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00},
{0x7c, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0x7c, 0x00},
{0xfe, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x00},
{0x7c, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0x7c, 0x00},
{0x7c, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x7c, 0x00},
{0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00},
{0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30},
{0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00},
{0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00},
{0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00},
{0x3c, 0x66, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x00},
{0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x7e, 0x00},
{0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00},
{0xfc, 0xc6, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0x00},
{0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00},
{0xf8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0xf8, 0x00},
{0xfe, 0xc0, 0xc0, 0xf8, 0xc0, 0xc0, 0xfe, 0x00},
{0xfe, 0xc0, 0xc0, 0xf8, 0xc0, 0xc0, 0xc0, 0x00},
{0x7c, 0xc6, 0xc0, 0xc0, 0xce, 0xc6, 0x7c, 0x00},
{0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00},
{0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00},
{0x06, 0x06, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00},
{0xc6, 0xcc, 0xd8, 0xf0, 0xd8, 0xcc, 0xc6, 0x00},
{0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfe, 0x00},
{0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00},
{0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00},
{0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00},
{0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0xc0, 0x00},
{0x7c, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x06},
{0xfc, 0xc6, 0xc6, 0xfc, 0xd8, 0xcc, 0xc6, 0x00},
{0x7c, 0xc6, 0xc0, 0x7c, 0x06, 0xc6, 0x7c, 0x00},
{0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00},
{0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0x00},
{0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x38, 0x00},
{0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0x6c, 0x00},
{0xc6, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0xc6, 0x00},
{0xc6, 0xc6, 0xc6, 0x7c, 0x18, 0x30, 0xe0, 0x00},
{0xfe, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xfe, 0x00},
{0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00},
{0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00},
{0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00},
{0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},
{0x18, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x7c, 0x06, 0x7e, 0xc6, 0x7e, 0x00},
{0xc0, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xfc, 0x00},
{0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc6, 0x7c, 0x00},
{0x06, 0x06, 0x06, 0x7e, 0xc6, 0xc6, 0x7e, 0x00},
{0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00},
{0x1c, 0x36, 0x30, 0x78, 0x30, 0x30, 0x78, 0x00},
{0x00, 0x00, 0x7e, 0xc6, 0xc6, 0x7e, 0x06, 0xfc},
{0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x00},
{0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00},
{0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0xc6, 0x7c},
{0xc0, 0xc0, 0xcc, 0xd8, 0xf8, 0xcc, 0xc6, 0x00},
{0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00},
{0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xd6, 0x00},
{0x00, 0x00, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x00},
{0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00},
{0x00, 0x00, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0},
{0x00, 0x00, 0x7e, 0xc6, 0xc6, 0x7e, 0x06, 0x06},
{0x00, 0x00, 0xfc, 0xc6, 0xc0, 0xc0, 0xc0, 0x00},
{0x00, 0x00, 0x7e, 0xc0, 0x7c, 0x06, 0xfc, 0x00},
{0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x0e, 0x00},
{0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x00},
{0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x7c, 0x38, 0x00},
{0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xfe, 0x6c, 0x00},
{0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00},
{0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0xfc},
{0x00, 0x00, 0xfe, 0x0c, 0x38, 0x60, 0xfe, 0x00},
{0x0e, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0e, 0x00},
{0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00},
{0x70, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x70, 0x00},
{0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
};

unsigned char font_data_6x8[95][8] = {
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x10,0x38,0x38,0x10,0x10,0x00,0x10,0x00},
{0x6c,0x6c,0x48,0x00,0x00,0x00,0x00,0x00},
{0x00,0x28,0x7c,0x28,0x28,0x7c,0x28,0x00},
{0x20,0x38,0x40,0x30,0x08,0x70,0x10,0x00},
{0x64,0x64,0x08,0x10,0x20,0x4c,0x4c,0x00},
{0x20,0x50,0x50,0x20,0x54,0x48,0x34,0x00},
{0x30,0x30,0x20,0x00,0x00,0x00,0x00,0x00},
{0x10,0x20,0x20,0x20,0x20,0x20,0x10,0x00},
{0x20,0x10,0x10,0x10,0x10,0x10,0x20,0x00},
{0x00,0x28,0x38,0x7c,0x38,0x28,0x00,0x00},
{0x00,0x10,0x10,0x7c,0x10,0x10,0x00,0x00},
{0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x20},
{0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00},
{0x00,0x04,0x08,0x10,0x20,0x40,0x00,0x00},
{0x38,0x44,0x4c,0x54,0x64,0x44,0x38,0x00},
{0x10,0x30,0x10,0x10,0x10,0x10,0x38,0x00},
{0x38,0x44,0x04,0x18,0x20,0x40,0x7c,0x00},
{0x38,0x44,0x04,0x38,0x04,0x44,0x38,0x00},
{0x08,0x18,0x28,0x48,0x7c,0x08,0x08,0x00},
{0x7c,0x40,0x40,0x78,0x04,0x44,0x38,0x00},
{0x18,0x20,0x40,0x78,0x44,0x44,0x38,0x00},
{0x7c,0x04,0x08,0x10,0x20,0x20,0x20,0x00},
{0x38,0x44,0x44,0x38,0x44,0x44,0x38,0x00},
{0x38,0x44,0x44,0x3c,0x04,0x08,0x30,0x00},
{0x00,0x00,0x30,0x30,0x00,0x30,0x30,0x00},
{0x00,0x00,0x30,0x30,0x00,0x30,0x30,0x20},
{0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x00},
{0x00,0x00,0x7c,0x00,0x00,0x7c,0x00,0x00},
{0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x00},
{0x38,0x44,0x04,0x18,0x10,0x00,0x10,0x00},
{0x38,0x44,0x5c,0x54,0x5c,0x40,0x38,0x00},
{0x38,0x44,0x44,0x44,0x7c,0x44,0x44,0x00},
{0x78,0x44,0x44,0x78,0x44,0x44,0x78,0x00},
{0x38,0x44,0x40,0x40,0x40,0x44,0x38,0x00},
{0x78,0x44,0x44,0x44,0x44,0x44,0x78,0x00},
{0x7c,0x40,0x40,0x78,0x40,0x40,0x7c,0x00},
{0x7c,0x40,0x40,0x78,0x40,0x40,0x40,0x00},
{0x38,0x44,0x40,0x5c,0x44,0x44,0x3c,0x00},
{0x44,0x44,0x44,0x7c,0x44,0x44,0x44,0x00},
{0x38,0x10,0x10,0x10,0x10,0x10,0x38,0x00},
{0x04,0x04,0x04,0x04,0x44,0x44,0x38,0x00},
{0x44,0x48,0x50,0x60,0x50,0x48,0x44,0x00},
{0x40,0x40,0x40,0x40,0x40,0x40,0x7c,0x00},
{0x44,0x6c,0x54,0x44,0x44,0x44,0x44,0x00},
{0x44,0x64,0x54,0x4c,0x44,0x44,0x44,0x00},
{0x38,0x44,0x44,0x44,0x44,0x44,0x38,0x00},
{0x78,0x44,0x44,0x78,0x40,0x40,0x40,0x00},
{0x38,0x44,0x44,0x44,0x54,0x48,0x34,0x00},
{0x78,0x44,0x44,0x78,0x48,0x44,0x44,0x00},
{0x38,0x44,0x40,0x38,0x04,0x44,0x38,0x00},
{0x7c,0x10,0x10,0x10,0x10,0x10,0x10,0x00},
{0x44,0x44,0x44,0x44,0x44,0x44,0x38,0x00},
{0x44,0x44,0x44,0x44,0x44,0x28,0x10,0x00},
{0x44,0x44,0x54,0x54,0x54,0x54,0x28,0x00},
{0x44,0x44,0x28,0x10,0x28,0x44,0x44,0x00},
{0x44,0x44,0x44,0x28,0x10,0x10,0x10,0x00},
{0x78,0x08,0x10,0x20,0x40,0x40,0x78,0x00},
{0x38,0x20,0x20,0x20,0x20,0x20,0x38,0x00},
{0x00,0x40,0x20,0x10,0x08,0x04,0x00,0x00},
{0x38,0x08,0x08,0x08,0x08,0x08,0x38,0x00},
{0x10,0x28,0x44,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc},
{0x30,0x30,0x10,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x38,0x04,0x3c,0x44,0x3c,0x00},
{0x40,0x40,0x78,0x44,0x44,0x44,0x78,0x00},
{0x00,0x00,0x38,0x44,0x40,0x44,0x38,0x00},
{0x04,0x04,0x3c,0x44,0x44,0x44,0x3c,0x00},
{0x00,0x00,0x38,0x44,0x78,0x40,0x38,0x00},
{0x18,0x20,0x20,0x78,0x20,0x20,0x20,0x00},
{0x00,0x00,0x3c,0x44,0x44,0x3c,0x04,0x38},
{0x40,0x40,0x70,0x48,0x48,0x48,0x48,0x00},
{0x10,0x00,0x10,0x10,0x10,0x10,0x18,0x00},
{0x08,0x00,0x18,0x08,0x08,0x08,0x48,0x30},
{0x40,0x40,0x48,0x50,0x60,0x50,0x48,0x00},
{0x10,0x10,0x10,0x10,0x10,0x10,0x18,0x00},
{0x00,0x00,0x68,0x54,0x54,0x44,0x44,0x00},
{0x00,0x00,0x70,0x48,0x48,0x48,0x48,0x00},
{0x00,0x00,0x38,0x44,0x44,0x44,0x38,0x00},
{0x00,0x00,0x78,0x44,0x44,0x44,0x78,0x40},
{0x00,0x00,0x3c,0x44,0x44,0x44,0x3c,0x04},
{0x00,0x00,0x58,0x24,0x20,0x20,0x70,0x00},
{0x00,0x00,0x38,0x40,0x38,0x04,0x38,0x00},
{0x00,0x20,0x78,0x20,0x20,0x28,0x10,0x00},
{0x00,0x00,0x48,0x48,0x48,0x58,0x28,0x00},
{0x00,0x00,0x44,0x44,0x44,0x28,0x10,0x00},
{0x00,0x00,0x44,0x44,0x54,0x7c,0x28,0x00},
{0x00,0x00,0x48,0x48,0x30,0x48,0x48,0x00},
{0x00,0x00,0x48,0x48,0x48,0x38,0x10,0x60},
{0x00,0x00,0x78,0x08,0x30,0x40,0x78,0x00},
{0x18,0x20,0x20,0x60,0x20,0x20,0x18,0x00},
{0x10,0x10,0x10,0x00,0x10,0x10,0x10,0x00},
{0x30,0x08,0x08,0x0c,0x08,0x08,0x30,0x00},
{0x28,0x50,0x00,0x00,0x00,0x00,0x00,0x00}
};

unsigned char letter_data[95][13] = {
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},// space :32
{0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18},// ! :33
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36},
{0x00, 0x00, 0x00, 0x66, 0x66, 0xff, 0x66, 0x66, 0xff, 0x66, 0x66, 0x00, 0x00},
{0x00, 0x00, 0x18, 0x7e, 0xff, 0x1b, 0x1f, 0x7e, 0xf8, 0xd8, 0xff, 0x7e, 0x18},
{0x00, 0x00, 0x0e, 0x1b, 0xdb, 0x6e, 0x30, 0x18, 0x0c, 0x76, 0xdb, 0xd8, 0x70},
{0x00, 0x00, 0x7f, 0xc6, 0xcf, 0xd8, 0x70, 0x70, 0xd8, 0xcc, 0xcc, 0x6c, 0x38},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1c, 0x0c, 0x0e},
{0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c},
{0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30},
{0x00, 0x00, 0x00, 0x00, 0x99, 0x5a, 0x3c, 0xff, 0x3c, 0x5a, 0x99, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00},
{0x00, 0x00, 0x30, 0x18, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0x0c, 0x0c, 0x06, 0x06, 0x03, 0x03},
{0x00, 0x00, 0x3c, 0x66, 0xc3, 0xe3, 0xf3, 0xdb, 0xcf, 0xc7, 0xc3, 0x66, 0x3c},
{0x00, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x38, 0x18},
{0x00, 0x00, 0xff, 0xc0, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x03, 0xe7, 0x7e},
{0x00, 0x00, 0x7e, 0xe7, 0x03, 0x03, 0x07, 0x7e, 0x07, 0x03, 0x03, 0xe7, 0x7e},
{0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xff, 0xcc, 0x6c, 0x3c, 0x1c, 0x0c},
{0x00, 0x00, 0x7e, 0xe7, 0x03, 0x03, 0x07, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0xff},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xc7, 0xfe, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e},
{0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x03, 0x03, 0xff},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xe7, 0x7e, 0xe7, 0xc3, 0xc3, 0xe7, 0x7e},
{0x00, 0x00, 0x7e, 0xe7, 0x03, 0x03, 0x03, 0x7f, 0xe7, 0xc3, 0xc3, 0xe7, 0x7e},
{0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x30, 0x18, 0x1c, 0x1c, 0x00, 0x00, 0x1c, 0x1c, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06},
{0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60},
{0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x18, 0x0c, 0x06, 0x03, 0xc3, 0xc3, 0x7e},
{0x00, 0x00, 0x3f, 0x60, 0xcf, 0xdb, 0xd3, 0xdd, 0xc3, 0x7e, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18},
{0x00, 0x00, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
{0x00, 0x00, 0x7e, 0xe7, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e},
{0x00, 0x00, 0xfc, 0xce, 0xc7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc7, 0xce, 0xfc},
{0x00, 0x00, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xff},
{0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0xff},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xcf, 0xc0, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e},
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
{0x00, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e},
{0x00, 0x00, 0x7c, 0xee, 0xc6, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06},
{0x00, 0x00, 0xc3, 0xc6, 0xcc, 0xd8, 0xf0, 0xe0, 0xf0, 0xd8, 0xcc, 0xc6, 0xc3},
{0x00, 0x00, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0},
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xff, 0xff, 0xe7, 0xc3},
{0x00, 0x00, 0xc7, 0xc7, 0xcf, 0xcf, 0xdf, 0xdb, 0xfb, 0xf3, 0xf3, 0xe3, 0xe3},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xe7, 0x7e},
{0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
{0x00, 0x00, 0x3f, 0x6e, 0xdf, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c},
{0x00, 0x00, 0xc3, 0xc6, 0xcc, 0xd8, 0xf0, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
{0x00, 0x00, 0x7e, 0xe7, 0x03, 0x03, 0x07, 0x7e, 0xe0, 0xc0, 0xc0, 0xe7, 0x7e},
{0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
{0x00, 0x00, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
{0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
{0x00, 0x00, 0xc3, 0x66, 0x66, 0x3c, 0x3c, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3},
{0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3},
{0x00, 0x00, 0xff, 0xc0, 0xc0, 0x60, 0x30, 0x7e, 0x0c, 0x06, 0x03, 0x03, 0xff},
{0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c},
{0x00, 0x03, 0x03, 0x06, 0x06, 0x0c, 0x0c, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60},
{0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18},
{0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x30, 0x70},
{0x00, 0x00, 0x7f, 0xc3, 0xc3, 0x7f, 0x03, 0xc3, 0x7e, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xfe, 0xc3, 0xc3, 0xc3, 0xc3, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0},
{0x00, 0x00, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x7f, 0xc3, 0xc3, 0xc3, 0xc3, 0x7f, 0x03, 0x03, 0x03, 0x03, 0x03},
{0x00, 0x00, 0x7f, 0xc0, 0xc0, 0xfe, 0xc3, 0xc3, 0x7e, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x33, 0x1e},
{0x7e, 0xc3, 0x03, 0x03, 0x7f, 0xc3, 0xc3, 0xc3, 0x7e, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0},
{0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00},
{0x38, 0x6c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x00},
{0x00, 0x00, 0xc6, 0xcc, 0xf8, 0xf0, 0xd8, 0xcc, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0},
{0x00, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78},
{0x00, 0x00, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xfe, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xfc, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00},
{0xc0, 0xc0, 0xc0, 0xfe, 0xc3, 0xc3, 0xc3, 0xc3, 0xfe, 0x00, 0x00, 0x00, 0x00},
{0x03, 0x03, 0x03, 0x7f, 0xc3, 0xc3, 0xc3, 0xc3, 0x7f, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xfe, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xfe, 0x03, 0x03, 0x7e, 0xc0, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x1c, 0x36, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x00},
{0x00, 0x00, 0x7e, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xc3, 0xe7, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00},
{0xc0, 0x60, 0x60, 0x30, 0x18, 0x3c, 0x66, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x60, 0x30, 0x18, 0x0c, 0x06, 0xff, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x0f, 0x18, 0x18, 0x18, 0x38, 0xf0, 0x38, 0x18, 0x18, 0x18, 0x0f},
{0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18},
{0x00, 0x00, 0xf0, 0x18, 0x18, 0x18, 0x1c, 0x0f, 0x1c, 0x18, 0x18, 0x18, 0xf0},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x8f, 0xf1, 0x60, 0x00, 0x00, 0x00}  // :126
};

static inline int mmin(int a, int b)
{
	return a < b ? a : b;
}

static inline int mmax(int a, int b)
{
	return a > b ? a : b;
}

void xui_init_gfx(xui_gfx* gfx, int width, int height)
{
    gfx->width = width;
    gfx->height = height;
    gfx->pixels = (unsigned int*)malloc(width * height * sizeof(unsigned int));
    memset(gfx->pixels, 0x00, width * height * sizeof(unsigned int ));
}

void xui_destroy_gfx(xui_gfx* gfx)
{
    free(gfx->pixels);
    gfx->pixels = NULL;
}

void xui_clear(xui_gfx* gfx, int col)
{
    for(int i=0; i < (gfx->width * gfx->height); ++i)
        gfx->pixels[i] = col;
}

void xui_draw_rect(xui_gfx* gfx, int x, int y, int w, int h, int col)
{
	int x0 = mmax(0, x);
	int y0 = mmax(0, y);
	int x1 = mmin(x + w, gfx->width);
	int y1 = mmin(y + h, gfx->height);

	for(int j=y0; j < y1; ++j)
	{
        unsigned int* pix = &gfx->pixels[j * gfx->width + x0];
		for(int i=x0; i < x1; ++i)
		{
			*pix++ = col;
		}
	}
}

void xui_draw_rect_outline(xui_gfx* gfx, int x, int y, int w, int h, int col)
{
	int x0 = mmax(0, x);
	int y0 = mmax(0, y);
	int x1 = mmin(x + w, gfx->width);
	int y1 = mmin(y + h, gfx->height);

    int gfx_width = gfx->width;
    int gfx_height = gfx->height;
	if(x >= 0 && x < gfx_width)
	{
        unsigned int* pix = &gfx->pixels[y0 * gfx_width + x];
		for(int j=y0; j < y1; ++j)
        {
			*pix = col;
            pix += gfx_width;
        }
	}
	if(x+w-1 >= 0 && x+w-1 < gfx_width)
	{
        unsigned int* pix = &gfx->pixels[y0 * gfx_width + x+w-1];
		for(int j=y0; j < y1; ++j)
        {
			*pix = col;
            pix += gfx_width;
        }
	}
	if(y >= 0 && y < gfx_height)
	{
        unsigned int* pix = &gfx->pixels[y * gfx_width + x0];
		for(int i=x0; i < x1; ++i)
			*pix++ = col;
	}
	if(y+h-1 >= 0 && y+h-1 < gfx_height)
	{
        unsigned int* pix = &gfx->pixels[(y+h-1) * gfx_width + x0];
		for(int i=x0; i < x1; ++i)
			*pix++ = col;
	}
}

void xui_draw_char(xui_gfx* gfx, int x, int y, int col, char ch)
{
	if(ch < 32 || ch > 126)
		return;

	int font_h = 8;
	int font_w = 6;
	unsigned char* letter = font_data_6x8[ch - 32];
	for(int j=0; j<mmin(font_h, gfx->height - y); ++j)
	{
		unsigned char c = letter[j];
		for(int i=0; i<mmin(font_w, gfx->width - x); ++i)
		{
			if(((c >> (font_w-i)) & 0x1) != 0)
			{
				gfx->pixels[(y+j)*gfx->width + (i+x)] = col;
			}
		}
	}
/*	int font_h = 13;
	int font_w = 8;
	unsigned char* letter = letter_data[ch - 32];
	for(int j=0; j<mmin(13, gfx->height - y); ++j)
	{
		unsigned char c = letter[12 - j];
		for(int i=0; i<mmin(8, gfx->width - x); ++i)
		{
			if(((c >> (7-i)) & 0x1) != 0)
			{
				gfx->pixels[(y+j)*gfx->width + (i+x)] = col;
			}
		}
	}*/
}

void xui_draw_string(xui_gfx* gfx, int x, int y, int col, const char* str)
{
	int ch_width = 8;
	int ch_space = 2;
	int line_height = 10;

	int x0 = x;
	char ch;
	while((ch = *str++))
	{
		xui_draw_char(gfx, x,y,col, ch);
		x += ch_width + ch_space;

		if(ch == '\n')
		{
			y += line_height;
			x = x0;
		}
	}
}

void xui_string_bounds(xui_gfx* gfx, const char* str, int* w, int* h)
{
	int ch_width = 8;
	int ch_height = 8;
	int ch_space = 2;
	int line_height = 10;

	*w = 0;
	*h = ch_height;
	int w0 = 0;
	char ch;
	while((ch = *str++))
	{
		w0 += ch_width + ch_space;

		if(ch == '\n')
		{
			*h += line_height;
			*w = mmax(*w, w0);
		}
	}

	*w = mmax(*w, w0);
}

#undef XUI_GFX_IMPLEMENTATION
#endif // XUI_GFX_IMPLEMENTATION